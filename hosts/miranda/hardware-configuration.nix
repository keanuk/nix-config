# Do not modify this file!  It was generated by ‘nixos-generate-config’
# and may be overwritten by future invocations.  Please make changes
# to /etc/nixos/configuration.nix instead.
{ config, lib, pkgs, modulesPath, ... }:

{
  imports =
    [
      (modulesPath + "/installer/scan/not-detected.nix")
    ];

  boot.initrd.availableKernelModules = [ "xhci_pci" "nvme" "usb_storage" "sd_mod" "rtsx_pci_sdmmc" ];
  boot.initrd.kernelModules = [ ];
  boot.kernelModules = [ "kvm-intel" ];
  boot.extraModulePackages = [ ];

  # Enables DHCP on each ethernet and wireless interface. In case of scripted networking
  # (the default) this is the recommended approach. When using systemd-networkd it's
  # still possible to use this option, but it's recommended to use it in conjunction
  # with explicit per-interface declarations with `networking.interfaces.<interface>.useDHCP`.
  networking.useDHCP = lib.mkDefault true;
  # networking.interfaces.wlp58s0.useDHCP = lib.mkDefault true;

  nixpkgs.hostPlatform = lib.mkDefault "x86_64-linux";
  hardware.cpu.intel.updateMicrocode = lib.mkDefault config.hardware.enableRedistributableFirmware;

  systemd.services.rollback = {
    description = "Rollback root filesystem";
    after = [ "local-fs.target" ];
    wantedBy = [ "multi-user.target" ];
    serviceConfig.Type = "oneshot";
    # Important: No DefaultDependencies!  We handle mounting ourselves.
    unitConfig.DefaultDependencies = "no"; 
    script = ''
      # 1. Mount the BTRFS volume using the by-id path.
      # Because of nix-impermanence, /dev/mapper/crypted is unreliable.
      # We use the by-id path directly.
      BTRFS_DEVICE="/dev/disk/by-id/nvme-THNSN5512GPUK_TOSHIBA_27MS11HET52T-part2" # Update if your partition number is different
      cryptsetup luksOpen "$BTRFS_DEVICE" crypted
      BTRFS_MNT="/mnt/btrfs_root" # Temporary mount point
      mkdir -p "$BTRFS_MNT"
      mount /dev/mapper/crypted "$BTRFS_MNT"

      # 2. Find the latest snapshot (customize this logic!)
      SNAPSHOT_DIR="$BTRFS_MNT/.snapshots"
      latest_snapshot=$(ls -t "$SNAPSHOT_DIR" | head -n 1) # Simplest: latest by name.  Improve as needed.

      if [[ -z "$latest_snapshot" ]]; then
        echo "No snapshots found. Skipping rollback."
        umount "$BTRFS_MNT"
        cryptsetup luksClose crypted
        exit 0 # Exit cleanly if no snapshot exists
      fi

      # 3. Set the default subvolume
      btrfs subvolume set-default "$SNAPSHOT_DIR/$latest_snapshot" "$BTRFS_MNT"

      # 4. Unmount and close cryptsetup
      umount "$BTRFS_MNT"
      cryptsetup luksClose crypted

      # 5. Remount root (important!)
      # The root filesystem is still the old one in memory.  We need to remount!
      mount -o remount,ro / # Remount read-only first for safety
      mount -o remount,rw / # Then remount read-write

      # 6. Optional: Log the rollback (useful for debugging)
      echo "Rolled back to snapshot: $latest_snapshot" >> /var/log/rollback.log # Ensure /var/log is persistent

    '';
  };
}
